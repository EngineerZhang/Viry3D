<Shader name="ARPlane" queue="Geometry">
	<VertexShader name="vs">
		<UniformBuffer name="buf_vs" binding="2">
			<Uniform name="_ViewProjection" size="64"/>
		</UniformBuffer>
		<VertexAttribute name="Vertex" location="0"/>
		<VertexAttribute name="Texcoord" location="1"/>
		<Include name="Base.in"/>
		<Source>
UniformBuffer(1, 0) uniform buf_vs_obj {
	mat4 _World;
} u_buf_obj;

UniformBuffer(0, 2) uniform buf_vs {
	mat4 _ViewProjection;
} u_buf;

layout (location = 0) in vec4 a_pos;
layout (location = 1) in vec2 a_uv;

Varying(0) out vec2 v_uv;
Varying(1) out vec4 v_pos_world;
		
void main() {
	vec4 pos_world = a_pos * u_buf_obj._World;
	gl_Position = pos_world * u_buf._ViewProjection;
	v_uv = a_uv;
	
	v_pos_world = pos_world;
	
	vulkan_convert();
}
		</Source>
	</VertexShader>

	<PixelShader name="ps">
		<Sampler name="_MainTex" binding="3"/>
		<Sampler name="_ShadowMap" binding="4"/>
		<UniformBuffer name="buf_ps" binding="5">
			<Uniform name="_ViewProjectionLight" size="64"/>
			<Uniform name="_ShadowMapTexel" size="16"/>
			<Uniform name="_ShadowParam" size="16"/>
		</UniformBuffer>
		<Include name="ShadowMap.in"/>
		<Source>
precision mediump float;

UniformTexture(0, 3) uniform sampler2D _MainTex;
UniformTexture(0, 4) uniform sampler2D _ShadowMap;

UniformBuffer(0, 5) uniform buf_ps {
	mat4 _ViewProjectionLight;
	vec4 _ShadowMapTexel;
	vec4 _ShadowParam;
} u_buf;

Varying(0) in vec2 v_uv;
Varying(1) in vec4 v_pos_world;

layout (location = 0) out vec4 o_frag;

void main()
{
	vec4 c = texture(_MainTex, v_uv);

	float shadow;
	shadow_map_ps(shadow);
	
	c = c * shadow;
	
	o_frag = c;
}
		</Source>
	</PixelShader>

	<RenderState name="rs">
	</RenderState>

	<Pass name="pass"
		  vs="vs"
		  ps="ps"
		  rs="rs"/>
</Shader>