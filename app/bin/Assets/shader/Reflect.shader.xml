<Shader name="Reflect" queue="Geometry">
	<VertexShader name="vs">
		<UniformBuffer name="buf_vs" binding="2">
			<Uniform name="_ViewProjection" size="64"/>
			<Uniform name="_WorldCameraPos" size="16"/>
		</UniformBuffer>
		<VertexAttribute name="Vertex" location="0"/>
		<VertexAttribute name="Texcoord" location="1"/>
		<VertexAttribute name="Normal" location="2"/>
		<Include name="Base.in"/>
		<Source>
UniformBuffer(1, 0) uniform buf_vs_obj {
	mat4 _World;
} u_buf_obj;

UniformBuffer(0, 2) uniform buf_vs {
	mat4 _ViewProjection;
	vec4 _WorldCameraPos;
} u_buf;

layout (location = 0) in vec4 a_pos;
layout (location = 1) in vec2 a_uv;
layout (location = 2) in vec3 a_normal;

Varying(0) out vec2 v_uv;
Varying(1) out vec3 v_world_normal;
Varying(2) out vec3 v_world_view_dir;

void main() {
	vec4 world_pos = a_pos * u_buf_obj._World;
	gl_Position = world_pos * u_buf._ViewProjection;
	v_uv = a_uv;

	v_world_normal = (vec4(a_normal, 0.0) * u_buf_obj._World).xyz;
	v_world_view_dir = u_buf._WorldCameraPos.xyz - world_pos.xyz;

	vulkan_convert();
}
		</Source>
	</VertexShader>

	<PixelShader name="ps">
		<Sampler name="_ReflectMap" type="Cube" binding="3"/>
		<Source>
precision mediump float;
      
UniformTexture(0, 3) uniform samplerCube _ReflectMap;

Varying(0) in vec2 v_uv;
Varying(1) in vec3 v_world_normal;
Varying(2) in vec3 v_world_view_dir;

layout (location = 0) out vec4 o_frag;

void main() {
	vec3 normal = normalize(v_world_normal);
	vec3 view_dir = normalize(v_world_view_dir);
	vec3 ref = reflect(view_dir, normal);
	
    o_frag = texture(_ReflectMap, ref);
}
		</Source>
	</PixelShader>

	<RenderState name="rs">
	</RenderState>

	<Pass name="pass"
		  vs="vs"
		  ps="ps"
		  rs="rs"/>
</Shader>
