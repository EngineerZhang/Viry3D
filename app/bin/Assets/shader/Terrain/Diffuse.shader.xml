<Shader name="Terrain/Diffuse" queue="Geometry">
	<VertexShader name="vs">
		<UniformBuffer name="buf_vs" binding="2">
			<Uniform name="_ViewProjection" size="64"/>
		</UniformBuffer>
		<VertexAttribute name="Vertex" location="0"/>
		<VertexAttribute name="Texcoord" location="1"/>
		<VertexAttribute name="Texcoord2" location="2"/>
		<VertexAttribute name="Normal" location="3"/>
		<VertexAttribute name="Tangent" location="4"/>
		<Include name="Base.in"/>
		<Source>
UniformBuffer(1, 0) uniform buf_vs_obj {
	mat4 _World;
} u_buf_obj;

UniformBuffer(0, 2) uniform buf_vs {
	mat4 _ViewProjection;
} u_buf;

layout (location = 0) in vec4 a_pos;
layout (location = 1) in vec2 a_uv;
layout (location = 2) in vec2 a_uv2;
layout (location = 3) in vec3 a_normal;
layout (location = 4) in vec4 a_tangent;

Varying(0) out vec2 v_uv;
Varying(1) out vec4 v_t2w0;
Varying(2) out vec4 v_t2w1;
Varying(3) out vec4 v_t2w2;

void main() {
	vec4 world_pos = a_pos * u_buf_obj._World;
	gl_Position = world_pos * u_buf._ViewProjection;
	v_uv = a_uv;
	
	vec3 normal = (vec4(a_normal, 0.0) * u_buf_obj._World).xyz;
	vec3 tangent = (vec4(a_tangent.xyz, 0.0) * u_buf_obj._World).xyz;
	vec3 binormal = cross(normal, tangent) * a_tangent.w;
	
	v_t2w0 = vec4(tangent.x, binormal.x, normal.x, world_pos.x);
	v_t2w1 = vec4(tangent.y, binormal.y, normal.y, world_pos.y);
	v_t2w2 = vec4(tangent.z, binormal.z, normal.z, world_pos.z);
	
	vulkan_convert();
}
		</Source>
	</VertexShader>

	<PixelShader name="ps">
		<UniformBuffer name="buf_ps" binding="3">
			<Uniform name="_SplatTex0SizeOffset" size="16"/>
			<Uniform name="_SplatTex1SizeOffset" size="16"/>
			<Uniform name="_SplatTex2SizeOffset" size="16"/>
			<Uniform name="_SplatTex3SizeOffset" size="16"/>
			<Uniform name="_ControlTex0SizeOffset" size="16"/>
			<Uniform name="_WorldSpaceLightPos" size="16"/>
			<Uniform name="_LightColor" size="16"/>
		</UniformBuffer>
		<Sampler name="_SplatTex0" binding="4" default="white"/>
		<Sampler name="_SplatTex1" binding="5" default="white"/>
		<Sampler name="_SplatTex2" binding="6" default="white"/>
		<Sampler name="_SplatTex3" binding="7" default="white"/>
		<Sampler name="_ControlTex0" binding="8"/>
		<Sampler name="_SplatNormal0" binding="9" default="bump"/>
		<Sampler name="_SplatNormal1" binding="10" default="bump"/>
		<Sampler name="_SplatNormal2" binding="11" default="bump"/>
		<Sampler name="_SplatNormal3" binding="12" default="bump"/>
		<Source>
precision mediump float;

UniformBuffer(0, 3) uniform buf_ps {
	vec4 _SplatTex0SizeOffset;
	vec4 _SplatTex1SizeOffset;
	vec4 _SplatTex2SizeOffset;
	vec4 _SplatTex3SizeOffset;
	vec4 _ControlTex0SizeOffset;
	vec4 _WorldSpaceLightPos;
	vec4 _LightColor;
} u_buf;

UniformTexture(0, 4) uniform sampler2D _SplatTex0;
UniformTexture(0, 5) uniform sampler2D _SplatTex1;
UniformTexture(0, 6) uniform sampler2D _SplatTex2;
UniformTexture(0, 7) uniform sampler2D _SplatTex3;
UniformTexture(0, 8) uniform sampler2D _ControlTex0;
UniformTexture(0, 9) uniform sampler2D _SplatNormal0;
UniformTexture(0, 10) uniform sampler2D _SplatNormal1;
UniformTexture(0, 11) uniform sampler2D _SplatNormal2;
UniformTexture(0, 12) uniform sampler2D _SplatNormal3;

Varying(0) in vec2 v_uv;
Varying(1) in vec4 v_t2w0;
Varying(2) in vec4 v_t2w1;
Varying(3) in vec4 v_t2w2;

layout (location = 0) out vec4 o_frag;

void main() {
	vec4 control = texture(_ControlTex0, v_uv / u_buf._ControlTex0SizeOffset.xy);

    vec4 color0 = texture(_SplatTex0, v_uv / u_buf._SplatTex0SizeOffset.xy);
	vec4 color1 = texture(_SplatTex1, v_uv / u_buf._SplatTex1SizeOffset.xy);
	vec4 color2 = texture(_SplatTex2, v_uv / u_buf._SplatTex2SizeOffset.xy);
	vec4 color3 = texture(_SplatTex3, v_uv / u_buf._SplatTex3SizeOffset.xy);
	vec4 c = color0 * control.r + color1 * control.g + color2 * control.b + color3 * control.a;

	vec3 normal0 = texture(_SplatNormal0, v_uv / u_buf._SplatTex0SizeOffset.xy).rgb * 2.0 - 1.0;
	vec3 normal1 = texture(_SplatNormal1, v_uv / u_buf._SplatTex1SizeOffset.xy).rgb * 2.0 - 1.0;
	vec3 normal2 = texture(_SplatNormal2, v_uv / u_buf._SplatTex2SizeOffset.xy).rgb * 2.0 - 1.0;
	vec3 normal3 = texture(_SplatNormal3, v_uv / u_buf._SplatTex3SizeOffset.xy).rgb * 2.0 - 1.0;
	vec3 n = normal0 * control.r + normal1 * control.g + normal2 * control.b + normal3 * control.a;

	vec3 world_pos = vec3(v_t2w0.w, v_t2w1.w, v_t2w2.w);
	vec3 world_normal = normalize(vec3(dot(v_t2w0.xyz, n), dot(v_t2w1.xyz, n), dot(v_t2w2.xyz, n)));

	vec3 light_dir = normalize(u_buf._WorldSpaceLightPos.xyz - world_pos * u_buf._WorldSpaceLightPos.w);
	vec3 light_color = u_buf._LightColor.rgb;
	
	vec3 N = world_normal;
	vec3 L = light_dir;
	float NdotL = max(dot(N, L), 0.0);
	
	c.rgb = c.rgb * light_color * NdotL;
	
	o_frag = c;
}
		</Source>
	</PixelShader>

	<RenderState name="rs">
	</RenderState>

	<Pass name="pass"
		  vs="vs"
		  ps="ps"
		  rs="rs"/>
</Shader>
